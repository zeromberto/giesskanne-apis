syntax = "proto3";

package de.zeromberto.giesskanne.plans.v1beta1;
option go_package = "github.com/zeromberto/giesskanne-apis-go/plans/v1beta1;plans";

import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "google/type/timeofday.proto";
import "google/type/dayofweek.proto";
import "validate/validate.proto";

// Manage plans.
service Plans {
  // Get a specific plan.
  rpc Get (PlanRequest) returns (Plan) {
    option (google.api.http) = {
            get: "/v1/plans/{id}"
        };
  }

  // List plans with optional filtering.
  rpc List (PlanListRequest) returns (PlanList) {
    option (google.api.http) = {
            get: "/v1/plans"
        };
  }

  // Create a new plan or overwrite an existing one.
  rpc Set (Plan) returns (Plan) {
    option (google.api.http) = {
            put: "/v1/plans/{id}"
            body: "*"
        };
  }

  // Update an existing plan.
  rpc Update (UpdatePlanRequest) returns (Plan) {
    option (google.api.http) = {
            patch: "/v1/plans/{plan.id}"
            body: "plan"
        };
  }

  // Delete a specific plan.
  rpc Delete (PlanRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
            delete : "/v1/plans/{id}"
        };
  }
}

message Plan {
  // The plan's ID.
  string id = 1 // The ID must be lowercase alphanumeric plus hyphens.
  [(validate.rules).string.pattern = "^[0-9a-z-]+$"];

  // The plan's user.
  string user = 2 // The user must be lowercase alphanumeric plus hyphens.
  [(validate.rules).string.pattern = "^[0-9a-z-]+$"];

  // The plan's location.
  string location = 3 // The location must be lowercase alphanumeric plus hyphens.
  [(validate.rules).string.pattern = "^[0-9a-z-]+$"];

  // The week plan.
  WeekPlan week_plan = 4 // The week plan must be set.
  [(validate.rules).message.required = true];

  // The plan's state.
  PlanState state = 5 // The state must be ENABLED or DISABLED.
  [(validate.rules).enum = {not_in: [0]}];
}

message PlanRequest {
  // The ID of the plan.
  string id = 1 // The ID must be lowercase alphanumeric plus hyphens.
  [(validate.rules).string.pattern = "^[0-9a-z-]+$"];
}

message UpdatePlanRequest {
  // The pump to be patched.
  Plan plan = 1 [(validate.rules).message = {required: true, skip: true}];

  // The field mask used to mark contract fields which shall be respected for the filter.
  google.protobuf.FieldMask update_mask = 2 [(validate.rules).message = {required: true, skip: true}];
}

message PlanListRequest {
  // The maximum number of items to return. 0 for default.
  int32 page_size = 1;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 2;

  // Filters to limit the response.
  PlanFilter filter = 3;
}

message PlanFilter {
  // The field mask used to mark fields which shall be respected for the filter.
  // See: https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
  google.protobuf.FieldMask field_mask = 1;

  // The user to filter.
  string user = 2;

  // The location to filter.
  string location = 3;

  // The plan's state.
  PlanState state = 4;
}

message PlanList {
  // The requested plans.
  repeated Plan plans = 1;

  // Token to retrieve the next page of results, or empty if there are no more results in the list.
  string next_page_token = 2;
}

message WeekPlan {
  // The plans for each day of the week.
  repeated DayPlan daily_plans = 1
  [(validate.rules).repeated.min_items = 1];
}

message DayPlan {
  // The week day.
  google.type.DayOfWeek day = 1;

  // The periods of the day.
  repeated Period periods = 2
  [(validate.rules).repeated.min_items = 1];
}

message Period {
  // The start time of the period.
  google.type.TimeOfDay start = 1
  [(validate.rules).message.required = true];

  // The desired pump flow rate during the period.
  float flow_rate = 2
  [(validate.rules).float.gte = 0.0];
}

enum PlanState {
  // The plan state is unspecified.
  PLAN_STATE_UNSPECIFIED = 0;

  // The plan is enabled.
  ENABLED = 1;

  // The plan is disabled.
  DISABLED = 2;
}
