syntax = "proto3";

package de.zeromberto.giesskanne.pumps.v1beta1;
option go_package = "github.com/zeromberto/giesskanne-apis-go/pumps/v1beta1;pumps";

import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "google/type/latlng.proto";
import "validate/validate.proto";
import "pumps/v1beta1/types.proto";

// Manage pumps.
service Pumps {
  // Get a specific pump.
  rpc Get (PumpRequest) returns (Pump) {
    option (google.api.http) = {
            get: "/v1/pumps/{id}"
        };
  }

  // List pumps with optional filtering.
  rpc List (PumpListRequest) returns (PumpList) {
    option (google.api.http) = {
            get: "/v1/pumps"
        };
  }

  // Create a new pump or overwrite an existing one.
  rpc Set (Pump) returns (Pump) {
    option (google.api.http) = {
            put: "/v1/pumps/{id}"
            body: "*"
        };
  }

  // Update an existing pump.
  rpc Update (UpdatePumpRequest) returns (Pump) {
    option (google.api.http) = {
            patch: "/v1/pumps/{pump.id}"
            body: "pump"
        };
  }

  // Delete a specific pump.
  rpc Delete (PumpRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
            delete : "/v1/pumps/{id}"
        };
  }
}

message Pump {
  // The pump's ID in the tenant's scope.
  string id = 1 [(validate.rules).string.pattern = "^[0-9a-z-]+$"];

  // The name of the pump.
  string name = 2 [(validate.rules).string.pattern = "[A-Za-z-]+"];

  // The pump's user.
  string user = 3 [(validate.rules).string.pattern = "^[0-9a-z-]+$"];

  // The pump's location.
  string location = 4 [(validate.rules).string.pattern = "^[0-9a-z-]+$"];

  // The pump's plan.
  string plan = 5 [(validate.rules).string.pattern = "^[0-9a-z-]+$"];

  // The flow rate of the pump l/min.
  double flow_rate = 6 [(validate.rules).double.gte = 0.0];

  // The dead time before water flows in s.
  double dead_time = 7 [(validate.rules).double.gte = 0.0];

  // The address of the pump.
  string url = 8 [(validate.rules).string.uri = true];

  // The mode of the pump.
  Mode mode = 9 [(validate.rules).enum = {not_in: [0]}];

  // The operating state of the pump.
  OperatingState operating_state = 10 [(validate.rules).enum.const = 0];

  // Represents a time zone from the
  // [IANA Time Zone Database](https://www.iana.org/time-zones).
  string time_zone = 11 [(validate.rules).string.pattern = "^[A-Za-z/]+$"];

  // The coordinates of the pump.
  google.type.LatLng coords = 12 [(validate.rules).message.required = true];
}

message PumpRequest {
  // The ID of the pump.
  string id = 1 [(validate.rules).string.pattern = "^[0-9a-z-]+$"];
}

message UpdatePumpRequest {
  // The pump to be patched.
  Pump pump = 1 [(validate.rules).message = {required: true, skip: true}];

  // The field mask used to mark contract fields which shall be respected for the filter.
  google.protobuf.FieldMask update_mask = 2 [(validate.rules).message = {required: true, skip: true}];
}

message PumpListRequest {
  // The maximum number of items to return. 0 for default.
  int32 page_size = 1;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 2;

  // Filters to limit the response.
  PumpFilter filter = 3;
}

message PumpFilter {
  // The field mask used to mark fields which shall be respected for the filter.
  // See: https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
  google.protobuf.FieldMask field_mask = 1;

  // The name to filter.
  string name = 2;

  // The user to filter.
  string user = 3;

  // The location to filter.
  string location = 4;

  // The flow rate of the pump l/min.
  double flow_rate = 5;

  // The address of the pump.
  string address = 6;

  // The mode of the pump.
  Mode mode = 7;

  // The operating state of the pump.
  OperatingState operating_state = 8;
}

message PumpList {
  // The requested pumps.
  repeated Pump pumps = 1;

  // Token to retrieve the next page of results, or empty if there are no more results in the list.
  string next_page_token = 2;
}
