syntax = "proto3";

package de.zeromberto.giesskanne.pumps.v1beta1;
option go_package = "github.com/zeromberto/giesskanne-apis-go/pumps/v1beta1;pumps";

import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";

// Manage pumps.
service Pumps {
  // Get a specific pump.
  rpc Get (PumpRequest) returns (Pump) {
    option (google.api.http) = {
            get: "/v1/pumps/{id}"
        };
  }

  // List pumps with optional filtering.
  rpc List (PumpListRequest) returns (PumpList) {
    option (google.api.http) = {
            get: "/v1/pumps"
        };
  }

  // Create a new pump or overwrite an existing one.
  rpc Set (Pump) returns (Pump) {
    option (google.api.http) = {
            put: "/v1/pumps/{id}"
            body: "*"
        };
  }

  // Update an existing pump.
  rpc Update (UpdatePumpRequest) returns (Pump) {
    option (google.api.http) = {
            patch: "/v1/pumps/{pump.id}"
            body: "pump"
        };
  }

  // Delete a specific pump.
  rpc Delete (PumpRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
            delete : "/v1/pumps/{id}"
        };
  }
}

message Pump {
  // The pump's ID in the tenant's scope.
  string id = 1 // The ID must be lowercase alphanumeric plus hyphens.
  [(validate.rules).string.pattern = "^[0-9a-z-]+$"];

  // The pump's user.
  string user = 2 // The user must be lowercase alphanumeric plus hyphens.
  [(validate.rules).string.pattern = "^[0-9a-z-]+$"];

  // The pump's plan.
  string plan = 3 // The location must be lowercase alphanumeric plus hyphens.
  [(validate.rules).string.pattern = "^[0-9a-z-]+$"];

  // The flow rate of the pump l/min.
  float flow_rate = 4 // The flow rate must be positive.
  [(validate.rules).float.gte = 0.0];

  // The address of the pump.
  string url = 5 // The address must be a valid address (IP or Hostname).
  [(validate.rules).string.uri = true];

  // The mode of the pump.
  Mode mode = 6 // The mode must be ENABLED or DISABLED.
  [(validate.rules).enum = {not_in: [0]}];

  // The operating state of the pump.
  OperatingState operating_state = 7 // The operating state must be specified.
  [(validate.rules).enum.const = 0];
}

message PumpRequest {
  // The ID of the pump.
  string id = 1 [(validate.rules).string.pattern = "^[0-9a-z-]+$"];
}

message UpdatePumpRequest {
  // The pump to be patched.
  Pump pump = 1 [(validate.rules).message = {required: true, skip: true}];

  // The field mask used to mark contract fields which shall be respected for the filter.
  google.protobuf.FieldMask update_mask = 2 [(validate.rules).message = {required: true, skip: true}];
}

message PumpListRequest {
  // The maximum number of items to return. 0 for default.
  int32 page_size = 1;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 2;

  // Filters to limit the response.
  PumpFilter filter = 3;
}

message PumpFilter {
  // The field mask used to mark fields which shall be respected for the filter.
  // See: https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
  google.protobuf.FieldMask field_mask = 1;

  // The user to filter.
  string user = 2;

  // The location to filter.
  string location = 3;

  // The flow rate of the pump l/min.
  float flow_rate = 4;

  // The address of the pump.
  string address = 5;

  // The mode of the pump.
  Mode mode = 6;

  // The operating state of the pump.
  OperatingState operating_state = 7;
}

message PumpList {
  // The requested pumps.
  repeated Pump pumps = 1;

  // Token to retrieve the next page of results, or empty if there are no more results in the list.
  string next_page_token = 2;
}

enum Mode {
  // The power state is unspecified.
  MODE_UNSPECIFIED = 0;

  // The pump is enabled.
  ENABLED = 1;

  // The pump is disabled.
  DISABLED = 2;
}

enum OperatingState {
  // The operating state is unspecified.
  OPERATING_STATE_UNSPECIFIED = 0;

  // The pump is active.
  ACTIVE = 1;

  // The pump is inactive.
  INACTIVE = 2;

  // The pump indicates an error.
  ERROR = 3;
}
